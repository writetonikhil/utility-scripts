import ctypes
import socket
import struct
from ctypes import POINTER, byref, cdll, c_int, windll, c_ulong, c_ushort, c_ushort, c_ubyte, oledll

BUFFER_OVERFLOW = 0x6f
ERROR_SUCCESS = 0

WIRELESS_TYPE = 71
ole32 = oledll.ole32

class IP_ADAPTER_ADDRESSES(ctypes.Structure):
    pass

class GUID(ctypes.Structure):
    _fields_ = [
        ('Data1', c_ulong),
        ('Data2', c_ushort),
        ('Data3', c_ushort),
        ('Data4', c_ubyte*8),
        ]

def guid_str(interface_guid):

    interface_guid_str = str(interface_guid.Data1) + str(interface_guid.Data2) + str(interface_guid.Data3)
    for data in interface_guid.Data4:
        interface_guid_str = interface_guid_str + str(data)
    return interface_guid_str

def GetAdaptersAddresses():
    """
    Returns an iteratable list of adapters
    """ 

    size = ctypes.c_ulong()
    GetAdaptersAddresses = ctypes.windll.iphlpapi.GetAdaptersAddresses
    GetAdaptersAddresses.argtypes = [
            ctypes.c_ulong,
            ctypes.c_ulong,
            ctypes.c_void_p,
            ctypes.POINTER(IP_ADAPTER_ADDRESSES),
            ctypes.POINTER(ctypes.c_ulong),
        ]
    GetAdaptersAddresses.restype = ctypes.c_ulong
    res = GetAdaptersAddresses(socket.AF_UNSPEC, 0, None, None, size)
    if res != BUFFER_OVERFLOW:
        raise RuntimeError("Error in getting structure length for GetAdaptersAddresses (%d)" % res)
    pointer_type = ctypes.POINTER(IP_ADAPTER_ADDRESSES)
    buffer = ctypes.create_string_buffer(size.value)
    struct_p = ctypes.cast(buffer, pointer_type)
    res = GetAdaptersAddresses(socket.AF_UNSPEC, 0, None, struct_p, size)
    if res != ERROR_SUCCESS: # NO_ERROR:
        raise RuntimeError("Error while retrieving addresses in GetAdaptersAddresses (%d)" % res)
    while struct_p:
        yield struct_p.contents
        struct_p = struct_p.contents.Next

def getadapters():
    """
    A method for retrieving info of the network
    interfaces.
    """
    IF_TYPE_SOFTWARE_LOOPBACK = 24
    IfOperStatusUp = 1

    result = []

    addresses = GetAdaptersAddresses()
    print addresses
    for address in addresses:
        if address.OperStatus != IfOperStatusUp or address.IfType == IF_TYPE_SOFTWARE_LOOPBACK:
            continue
        frname = str(address.FriendlyName)
        iftype = int(address.IfType)
        ifindex = int(address.IfIndex)
        naddr = address.FirstUnicastAddress
        if iftype == WIRELESS_TYPE:
            interface_guid = GUID()
            ole32.CLSIDFromString(unicode(address.AdapterName), byref(interface_guid))
            interface_guid_str = guid_str(interface_guid)
            #wifiname = get_ssid(interface_guid_str)
            #if wifiname:
            #    frname = wifiname

        while (naddr):
            addr = naddr.contents
            ad = addr.Address.Address.contents
            if ad.Family == socket.AF_INET:
                ip4 = ".".join([str(i) for i in struct.unpack('>2x4B8x', ad.Addr.IPv4Addr)[0:4]])
                result.append((ifindex, frname, ip4, iftype, frname, ad.Family, addr.OnLinkPrefixLength))
            elif ad.Family == socket.AF_INET6:
                ip6 = ":".join([hex(i)[2:] for i in struct.unpack('>2xI8HI', ad.Addr.IPv6Addr)[1:9]])
                result.append((ifindex, frname, ip6, iftype, frname, ad.Family, addr.OnLinkPrefixLength))
            naddr = naddr.contents.Next             
    return result

adapters = getadapters()
for item in adapters:
    uindex, friendlyname, ipAddr, iftype, ifdesc, family, subnet = item
    print "uindex=%s, friendlyname=%s, ipAddr=%s, iftype=%s, ifdesc=%s, family=%s, subnet=%s" % (uindex, friendlyname, ipAddr, iftype, ifdesc, family, subnet)
